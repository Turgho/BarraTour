#!/bin/bash
# run-docker-debug.sh - Script para DEBUG da API Barra Tour

# Fun√ß√£o para verificar depend√™ncias
check_environment() {
    echo "üîç Verificando depend√™ncias do sistema..."
    echo "----------------------------------------"

    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o encontrado!"
        echo "   Instale em: https://docs.docker.com/get-docker/"
        return 1
    fi
    
    # Verificar Docker Compose
    if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
        echo "‚ùå Docker Compose n√£o encontrado!"
        echo "   Instale em: https://docs.docker.com/compose/install/"
        return 1
    fi

    docker_version=$(docker --version)
    echo "‚úÖ Docker: $docker_version"

    # Verificar se o Docker est√° rodando
    if ! docker info > /dev/null 2>&1; then
        echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop."
        return 1
    fi
    echo "‚úÖ Docker est√° rodando"

    echo "----------------------------------------"
    echo "‚úÖ Todas as verifica√ß√µes passaram!"
    return 0
}

# Fun√ß√£o para configurar vari√°veis de ambiente
setup_environment() {
    echo "üåø Configurando ambiente Docker..."
    
    # Carregar vari√°veis de ambiente do arquivo .env se existir
    if [ -f ".env" ]; then
        echo "üìÅ Carregando vari√°veis do arquivo .env"
        export $(cat .env | grep -v '#' | awk '/=/ {print $1}')
    else
        echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado, usando valores padr√£o"
        # Valores padr√£o para desenvolvimento
        export SA_PASSWORD=Barra@Tour3002
        export REDIS_PASSWORD=BarraRedis3002
        export JWT_SECRET_KEY=DevelopmentSuperSecretKeyThatIsLongEnoughForSecurity
        export JWT_ISSUER=BarraTour.API
        export JWT_AUDIENCE=BarraTour.App
        export JWT_EXPIRY_IN_MINUTES=60
    fi
    
    # Vari√°veis de ambiente padr√£o para Docker
    export COMPOSE_PROJECT_NAME=barra-tour
    export ASPNETCORE_ENVIRONMENT=Development
    
    echo "‚úÖ Ambiente Docker configurado"
}

# Fun√ß√£o para construir as imagens
build_images() {
    echo "üèóÔ∏è  Construindo imagens Docker..."
    
    # Verificar qual comando do Docker Compose est√° dispon√≠vel
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        COMPOSE_CMD="docker compose"
    fi
    
    if ! $COMPOSE_CMD build --no-cache; then
        echo "‚ùå Falha ao construir imagens Docker"
        return 1
    fi
    
    echo "‚úÖ Imagens constru√≠das com sucesso"
    return 0
}

# Fun√ß√£o para DEBUG - Executar API e mostrar logs completos
debug_api() {
    echo "üêõ INICIANDO MODO DEBUG..."
    echo "=========================="
    
    # Verificar qual comando do Docker Compose est√° dispon√≠vel
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        COMPOSE_CMD="docker compose"
    fi
    
    # Parar tudo primeiro
    echo "üõë Parando containers existentes..."
    $COMPOSE_CMD down
    
    # Construir imagens
    if ! build_images; then
        exit 1
    fi
    
    echo "üöÄ Iniciando API em modo debug..."
    echo "üìç A API tentar√° iniciar em: http://localhost:5078"
    echo "üì¢ TODOS OS LOGS SER√ÉO MOSTRADOS (incluindo erros)"
    echo "üõë Para parar, pressione Ctrl+C"
    echo ""
    echo "=================================================="
    
    # Executar API em foreground mostrando TODOS os logs
    $COMPOSE_CMD up api
}

# Tratamento de sinais para limpeza
cleanup() {
    echo ""
    echo "üõë Parando servi√ßos Docker..."
    
    # Verificar qual comando do Docker Compose est√° dispon√≠vel
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="docker-compose"
    else
        COMPOSE_CMD="docker compose"
    fi
    
    $COMPOSE_CMD down
    echo "üëã Servi√ßos parados. At√© logo!"
    exit 0
}

# Configurar trap para Ctrl+C
trap cleanup INT TERM

# Executar fun√ß√£o principal
echo "üê≥ DEBUG - Barra Tour API"
echo "========================"

# Verificar ambiente primeiro
if ! check_environment; then
    echo "‚ùå Falha na verifica√ß√£o do ambiente. Abortando."
    exit 1
fi

# Configurar ambiente
setup_environment

# Executar debug
debug_api